Description: Removes the record support to build with Java < 14
Author: Emmanuel Bourg <ebourg@apache.org>
Forwarded: not-needed
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/Factory.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/Factory.java
@@ -328,20 +328,6 @@
 			case ANNOTATION_TYPE :
 			case INTERFACE :
 			case CLASS :
-			case RECORD :
-				// for type
-				decodeModifiers(result, modifiers, new int[] {
-					ClassFileConstants.AccPublic,
-					ClassFileConstants.AccProtected,
-					ClassFileConstants.AccAbstract,
-					ClassFileConstants.AccFinal,
-					ClassFileConstants.AccPrivate,
-					ClassFileConstants.AccStatic,
-					ClassFileConstants.AccStrictfp,
-					ExtraCompilerModifiers.AccSealed,
-					ExtraCompilerModifiers.AccNonSealed
-				});
-				break;
 			case MODULE :
 				decodeModifiers(result, modifiers, new int[] {
 						ClassFileConstants.ACC_OPEN,
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/RecordComponentElementImpl.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2020, 2021 IBM Corporation.
- *
- * This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License 2.0
- * which accompanies this distribution, and is available at
- * https://www.eclipse.org/legal/epl-2.0/
- *
- * SPDX-License-Identifier: EPL-2.0
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-
-package org.eclipse.jdt.internal.compiler.apt.model;
-
-import javax.lang.model.element.ElementKind;
-import javax.lang.model.element.ElementVisitor;
-import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.RecordComponentElement;
-
-import org.eclipse.jdt.internal.compiler.apt.dispatch.BaseProcessingEnvImpl;
-import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
-import org.eclipse.jdt.internal.compiler.lookup.RecordComponentBinding;
-import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
-import org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding;
-
-public class RecordComponentElementImpl extends VariableElementImpl implements RecordComponentElement {
-
-	protected RecordComponentElementImpl(BaseProcessingEnvImpl env, RecordComponentBinding binding) {
-		super(env, binding);
-	}
-
-	@Override
-	public ElementKind getKind() {
-		return ElementKind.RECORD_COMPONENT;
-	}
-
-	@Override
-	public ExecutableElement getAccessor() {
-		RecordComponentBinding comp = (RecordComponentBinding) this._binding;
-		ReferenceBinding binding = comp.declaringRecord;
-		if (binding instanceof SourceTypeBinding) {
-			MethodBinding accessor = ((SourceTypeBinding) binding).getRecordComponentAccessor(comp.name);
-			return new ExecutableElementImpl(_env, accessor);
-		}
-		return null;
-	}
-
-	@Override
-	public <R, P> R accept(ElementVisitor<R, P> visitor, P param) {
-		return visitor.visitRecordComponent(this, param);
-	}
-}
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java
@@ -138,52 +138,10 @@
 			break;
 		case FIELD:
 		case ENUM_CONSTANT:
-		case RECORD_COMPONENT:
-			typeMirror = findMemberInHierarchy(referenceBinding, elementImpl._binding, new MemberInTypeFinder() {
-				@Override
-				public TypeMirror find(ReferenceBinding typeBinding, Binding memberBinding) {
-					FieldBinding fieldBinding = (FieldBinding) memberBinding;
-					for (FieldBinding field : typeBinding.fields()) {
-						if (CharOperation.equals(field.name, fieldBinding.name)) {
-							return TypesImpl.this._env.getFactory().newTypeMirror(field);
-						}
-					}
-					return null;
-				}
-			});
-
-			if (typeMirror != null) {
-				return typeMirror;
-			}
-			break;
 		case ENUM:
 		case ANNOTATION_TYPE:
 		case INTERFACE:
 		case CLASS:
-		case RECORD:
-			typeMirror = findMemberInHierarchy(referenceBinding, elementImpl._binding, new MemberInTypeFinder() {
-				@Override
-				public TypeMirror find(ReferenceBinding typeBinding, Binding memberBinding) {
-					ReferenceBinding elementBinding = (ReferenceBinding) memberBinding;
-					// If referenceBinding is a ParameterizedTypeBinding, this
-					// will return only ParameterizedTypeBindings
-					// for member types, even if the member happens to be a
-					// static nested class. That's probably a bug;
-					// static nested classes are not parameterized by their
-					// outer class.
-					for (ReferenceBinding memberReferenceBinding : typeBinding.memberTypes()) {
-						if (CharOperation.equals(elementBinding.compoundName, memberReferenceBinding.compoundName)) {
-							return TypesImpl.this._env.getFactory().newTypeMirror(memberReferenceBinding);
-						}
-					}
-					return null;
-				}
-			});
-
-			if (typeMirror != null) {
-				return typeMirror;
-			}
-			break;
 		default:
 			throw new IllegalArgumentException("element " + element + //$NON-NLS-1$
 					" has unrecognized element kind " + element.getKind()); //$NON-NLS-1$
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeElementImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeElementImpl.java
@@ -33,7 +33,6 @@
 import javax.lang.model.element.Name;
 import javax.lang.model.element.NestingKind;
 import javax.lang.model.element.PackageElement;
-import javax.lang.model.element.RecordComponentElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.TypeParameterElement;
 import javax.lang.model.element.VariableElement;
@@ -49,7 +48,6 @@
 import org.eclipse.jdt.internal.compiler.lookup.Binding;
 import org.eclipse.jdt.internal.compiler.lookup.FieldBinding;
 import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
-import org.eclipse.jdt.internal.compiler.lookup.RecordComponentBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
 import org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
@@ -90,15 +88,6 @@
 				case INTERFACE :
 				case CLASS :
 				case ENUM :
-				case RECORD :
-					TypeElementImpl typeElementImpl = (TypeElementImpl) e;
-					Binding typeBinding = typeElementImpl._binding;
-					if (typeBinding instanceof SourceTypeBinding) {
-						SourceTypeBinding sourceTypeBinding = (SourceTypeBinding) typeBinding;
-						TypeDeclaration typeDeclaration = (TypeDeclaration) sourceTypeBinding.scope.referenceContext();
-						return typeDeclaration.sourceStart;
-					}
-					break;
 				case CONSTRUCTOR :
 				case METHOD :
 					ExecutableElementImpl executableElementImpl = (ExecutableElementImpl) e;
@@ -110,17 +99,6 @@
 					break;
 				case ENUM_CONSTANT :
 				case FIELD :
-				case RECORD_COMPONENT :
-					VariableElementImpl variableElementImpl = (VariableElementImpl) e;
-					binding = variableElementImpl._binding;
-					if (binding instanceof FieldBinding) {
-						FieldBinding fieldBinding = (FieldBinding) binding;
-						FieldDeclaration fieldDeclaration = fieldBinding.sourceField();
-						if (fieldDeclaration != null) {
-							return fieldDeclaration.sourceStart;
-						}
-					}
-					break;
 				default:
 					break;
 			}
@@ -168,13 +146,6 @@
 				 enclosed.add(variable);
 			}
 		}
-		if (binding.isRecord()) {
-			RecordComponentBinding[] components = binding.components();
-			for (RecordComponentBinding comp : components) {
-				RecordComponentElement rec = new RecordComponentElementImpl(_env, comp);
-				enclosed.add(rec);
-			}
-		}
 		for (ReferenceBinding memberType : binding.memberTypes()) {
 			TypeElement type = new TypeElementImpl(_env, memberType, null);
 			enclosed.add(type);
@@ -183,23 +154,6 @@
 		return Collections.unmodifiableList(enclosed);
 	}
 
-	@Override
-    public List<? extends RecordComponentElement> getRecordComponents() {
-		if (_binding instanceof SourceTypeBinding) {
-			SourceTypeBinding binding = (SourceTypeBinding) _binding;
-			List<RecordComponentElement> enclosed = new ArrayList<>();
-			for (RecordComponentBinding comp : binding.components()) {
-				RecordComponentElement variable = new RecordComponentElementImpl(_env, comp);
-				enclosed.add(variable);
-			}
-			Collections.sort(enclosed, new SourceLocationComparator());
-			return Collections.unmodifiableList(enclosed);
-		}
-		// TODO: Add code for BinaryTypeBinding, which, as of now doesn't seem to contain components
-		return Collections.emptyList();
-    }
-
-	@Override
 	public List<? extends TypeMirror> getPermittedSubclasses() {
 		ReferenceBinding binding = (ReferenceBinding)_binding;
 		if (binding.isSealed()) {
@@ -264,9 +218,6 @@
 		if (refBinding.isEnum()) {
 			return ElementKind.ENUM;
 		}
-		else if (refBinding.isRecord()) {
-			return ElementKind.RECORD;
-		}
 		else if (refBinding.isAnnotationType()) {
 			return ElementKind.ANNOTATION_TYPE;
 		}
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementsImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementsImpl.java
@@ -347,15 +347,6 @@
 			case CLASS :
 			case ENUM :
 			case INTERFACE :
-			case RECORD :
-				TypeElementImpl typeElementImpl = (TypeElementImpl) e;
-				ReferenceBinding referenceBinding = (ReferenceBinding)typeElementImpl._binding;
-				if (referenceBinding instanceof SourceTypeBinding) {
-					SourceTypeBinding sourceTypeBinding = (SourceTypeBinding) referenceBinding;
-					referenceContext = sourceTypeBinding.scope.referenceContext;
-					javadoc = ((TypeDeclaration) referenceContext).javadoc;
-				}
-				break;
 			case PACKAGE :
 				// might need to handle javadoc of package-info.java file
 				PackageElementImpl packageElementImpl = (PackageElementImpl) e;
@@ -378,7 +369,6 @@
 					referenceContext = sourceMethod;
 				}
 				break;
-			case RECORD_COMPONENT :
 			case ENUM_CONSTANT :
 			case FIELD :
 				VariableElementImpl variableElementImpl = (VariableElementImpl) e;
@@ -584,10 +574,6 @@
 			case CLASS :
 			case ENUM :
 			case INTERFACE :
-			case RECORD :
-				TypeElementImpl typeElementImpl = (TypeElementImpl) type;
-				ReferenceBinding referenceBinding = (ReferenceBinding)typeElementImpl._binding;
-				return (PackageElement) _env.getFactory().newElement(referenceBinding.fPackage);
 			case PACKAGE :
 				return (PackageElement) type;
 			case CONSTRUCTOR :
@@ -597,12 +583,8 @@
 				return (PackageElement) _env.getFactory().newElement(methodBinding.declaringClass.fPackage);
 			case ENUM_CONSTANT :
 			case FIELD :
-			case RECORD_COMPONENT :
-				VariableElementImpl variableElementImpl = (VariableElementImpl) type;
-				FieldBinding fieldBinding = (FieldBinding) variableElementImpl._binding;
-				return (PackageElement) _env.getFactory().newElement(fieldBinding.declaringClass.fPackage);
 			case PARAMETER :
-				variableElementImpl = (VariableElementImpl) type;
+				VariableElementImpl variableElementImpl = (VariableElementImpl) type;
 				LocalVariableBinding localVariableBinding = (LocalVariableBinding) variableElementImpl._binding;
 				return (PackageElement) _env.getFactory().newElement(localVariableBinding.declaringScope.classScope().referenceContext.binding.fPackage);
 			case EXCEPTION_PARAMETER :
